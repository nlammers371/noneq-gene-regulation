function NonEqRatio = FidelityMaxNorm2(kon,km,kp,c1)
% expression taken from activator_model_v2.nb
% koff = 1
% c0 = 1

NonEqRatio = ...
(1+kon).*(1+c1.*kon).^(-1).*(1+km+kon+kp+((-1)+c1).^(-1).*km.^(-1) ...
  .*(1+kon).^(-1).*(1+km+kp).^(-1).*(((-1)+c1).^2.*km.^2.*(1+kon) ...
  .^2.*(1+km+kon+kp).*(1+km+c1.*kon+kp).*(km+km.^2+kp+2.*km.*kp+ ...
  kp.^2)).^(1/2)).^(-1).*(1+km+c1.*kon+kp+((-1)+c1).^(-1).*km.^(-1) ...
  .*(1+kon).^(-1).*(1+km+kp).^(-1).*(((-1)+c1).^2.*km.^2.*(1+kon) ...
  .^2.*(1+km+kon+kp).*(1+km+c1.*kon+kp).*(km+km.^2+kp+2.*km.*kp+ ...
  kp.^2)).^(1/2)).*(kon.*(km+kp)+kp.*(1+km+kp)+km.*(1+km+kp).*(1+(( ...
  -1)+c1).^(-1).*km.^(-2).*(1+kon).^(-1).*(1+km+kp).^(-1).*(((-1)+ ...
  c1).^2.*km.^2.*(1+kon).^2.*(1+km+kon+kp).*(1+km+c1.*kon+kp).*(km+ ...
  km.^2+kp+2.*km.*kp+kp.^2)).^(1/2))).*(c1.*kon.*(km+kp)+kp.*(1+km+ ...
  kp)+km.*(1+km+kp).*(1+((-1)+c1).^(-1).*km.^(-2).*(1+kon).^(-1).*( ...
  1+km+kp).^(-1).*(((-1)+c1).^2.*km.^2.*(1+kon).^2.*(1+km+kon+kp).*( ...
  1+km+c1.*kon+kp).*(km+km.^2+kp+2.*km.*kp+kp.^2)).^(1/2))).^(-1);